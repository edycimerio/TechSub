// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TechSub.Infraestrutura.Data;

#nullable disable

namespace TechSub.Infraestrutura.Migrations
{
    [DbContext(typeof(TechSubDbContext))]
    partial class TechSubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TechSub.Dominio.Entidades.Assinatura", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataProximaCobranca")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataTermino")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataTerminoTrial")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EmTrial")
                        .HasColumnType("boolean");

                    b.Property<int>("Periodicidade")
                        .HasColumnType("integer");

                    b.Property<Guid>("PlanoId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId", "Status");

                    b.ToTable("Assinaturas");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Pagamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssinaturaId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("DataProcessamento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataVencimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MensagemErro")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetodoPagamento")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TentativasCobranca")
                        .HasColumnType("integer");

                    b.Property<string>("TransacaoId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("AssinaturaId");

                    b.HasIndex("DataVencimento");

                    b.HasIndex("Status");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Plano", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DiasTrialGratuito")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ordem")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecoAnual")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("PrecoMensal")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Recursos")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("TemTrial")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Planos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Ativo = true,
                            DataAtualizacao = new DateTime(2025, 8, 23, 19, 30, 27, 931, DateTimeKind.Utc).AddTicks(7290),
                            DataCriacao = new DateTime(2025, 8, 23, 19, 30, 27, 931, DateTimeKind.Utc).AddTicks(7290),
                            Descricao = "Plano gratuito com recursos básicos",
                            DiasTrialGratuito = 0,
                            Nome = "Free",
                            Ordem = 1,
                            PrecoAnual = 0m,
                            PrecoMensal = 0m,
                            Recursos = "{\"usuarios\": 1, \"projetos\": 1, \"storage\": \"100MB\"}",
                            TemTrial = false
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Ativo = true,
                            DataAtualizacao = new DateTime(2025, 8, 23, 19, 30, 27, 931, DateTimeKind.Utc).AddTicks(7297),
                            DataCriacao = new DateTime(2025, 8, 23, 19, 30, 27, 931, DateTimeKind.Utc).AddTicks(7296),
                            Descricao = "Plano básico para pequenas equipes",
                            DiasTrialGratuito = 7,
                            Nome = "Basic",
                            Ordem = 2,
                            PrecoAnual = 299.00m,
                            PrecoMensal = 29.90m,
                            Recursos = "{\"usuarios\": 5, \"projetos\": 10, \"storage\": \"10GB\"}",
                            TemTrial = true
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Ativo = true,
                            DataAtualizacao = new DateTime(2025, 8, 23, 19, 30, 27, 931, DateTimeKind.Utc).AddTicks(7300),
                            DataCriacao = new DateTime(2025, 8, 23, 19, 30, 27, 931, DateTimeKind.Utc).AddTicks(7300),
                            Descricao = "Plano profissional para empresas",
                            DiasTrialGratuito = 7,
                            Nome = "Pro",
                            Ordem = 3,
                            PrecoAnual = 999.00m,
                            PrecoMensal = 99.90m,
                            Recursos = "{\"usuarios\": -1, \"projetos\": -1, \"storage\": \"100GB\"}",
                            TemTrial = true
                        });
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssinaturaAtivaId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DataAtualizacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DataCriacao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HashSenha")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Provedor")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ProvedorId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AssinaturaAtivaId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Assinatura", b =>
                {
                    b.HasOne("TechSub.Dominio.Entidades.Plano", "Plano")
                        .WithMany("Assinaturas")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TechSub.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany("Assinaturas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plano");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Pagamento", b =>
                {
                    b.HasOne("TechSub.Dominio.Entidades.Assinatura", "Assinatura")
                        .WithMany("Pagamentos")
                        .HasForeignKey("AssinaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assinatura");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("TechSub.Dominio.Entidades.Assinatura", "AssinaturaAtiva")
                        .WithOne()
                        .HasForeignKey("TechSub.Dominio.Entidades.Usuario", "AssinaturaAtivaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssinaturaAtiva");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Assinatura", b =>
                {
                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Plano", b =>
                {
                    b.Navigation("Assinaturas");
                });

            modelBuilder.Entity("TechSub.Dominio.Entidades.Usuario", b =>
                {
                    b.Navigation("Assinaturas");
                });
#pragma warning restore 612, 618
        }
    }
}
